name: test
on: [push]
jobs:
  ingest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create ingestion environment
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniconda-version: 'latest'
          channels: conda-forge
          environment-file: environment_ingest.yml
      - name: Ingest Data
        shell: bash -l {0}
        run: python ingest.py --bucket ${{ secrets.AWS_BUCKET }} --access ${{ secrets.AWS_ACCESS }} --secret ${{ secrets.AWS_SECRET }}
  compute:
    needs: ingest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create compute environment
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniconda-version: 'latest'
          channels: conda-forge
          environment-file: environment_compute.yml
      - name: Run Computation
        shell: bash -l {0}
        run: python compute.py --bucket ${{ secrets.AWS_BUCKET }} --access ${{ secrets.AWS_ACCESS }} --secret ${{ secrets.AWS_SECRET }}
  build_docker:
      runs-on: ubuntu-latest
      steps:
      - name: Set up Docker Buildx
      - uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/testrepo:latest
  #aws_compute:
  #  needs: [ingest, compute]
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Create ingestion environment
  #      uses: conda-incubator/setup-miniconda@v2.1.1
  #      with:
  #        miniconda-version: 'latest'
  #        channels: conda-forge
  #        environment-file: environment_ingest.yml
  #    - name: Queue Spot job
  #      shell: bash -l {0}
  #      run: |
  #        python aws.py spot --access ${{ secrets.AWS_ACCESS }} --secret ${{ secrets.AWS_SECRET }}